{"remainingRequest":"/home/AmineOmz/Bureau/T_DOP_700/front_aut/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/AmineOmz/Bureau/T_DOP_700/front_aut/src/pages/Dashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/AmineOmz/Bureau/T_DOP_700/front_aut/src/pages/Dashboard.vue","mtime":1569781194340},{"path":"/home/AmineOmz/Bureau/T_DOP_700/front_aut/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/AmineOmz/Bureau/T_DOP_700/front_aut/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/AmineOmz/Bureau/T_DOP_700/front_aut/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/AmineOmz/Bureau/T_DOP_700/front_aut/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport DashboardLayout from '@/pages';\nimport axios from 'axios';\nimport jwt_decode from 'jwt-decode';\nimport moment from 'moment';\nimport DatePicker from 'vue2-datepicker';\nimport datetime from 'vuejs-datetimepicker';\n\n\nam4core.useTheme(am4themes_animated);\nexport default {\n  name: 'Dashboard',\n  components: {\n    DatePicker,\n    datetime\n  },\n  data() {\n    return {\n      start: null,\n      end: null,\n      shortcuts: [\n      {\n        text: 'OK',\n        onClick: () => {\n          this.start = [new Date()],\n          this.end = [new Date()]\n          }\n      }],\n      timeOptions: {\n          start: '',\n          step: '',\n          end: ''\n      },\n      lang: {\n          days: ['Dim', 'Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam'],\n          months: ['Jan', 'Fev', 'Mar', 'Avr', 'Mai', 'Jui', 'Jui', 'Aou', 'Sep', 'Oct', 'Nov', 'Dec'],\n      }\n    }\n  },\n  mounted() {\n    let chart = am4core.create(this.$refs.chartdiv, am4charts.XYChart);\n    chart.data = [];\n    // XY\n    chart.dateFormatter.dateFormat = \"yyyy-MM-dd\";\n    let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\n    let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n    let series = chart.series.push(new am4charts.ColumnSeries());\n    series.dataFields.valueY = \"hours\";\n    series.dataFields.dateX = \"date\";\n    series.tooltipText = \"{value}\";\n    series.dataFields.value = \"hours\";\n    series.columns.template.width = am4core.percent(50);\n    series.tooltip.pointerOrientation = \"vertical\";\n\n    chart.cursor = new am4charts.XYCursor();\n    chart.cursor.snapToSeries = series;\n    chart.cursor.xAxis = dateAxis;\n    //chart.scrollbarY = new am4core.Scrollbar();\n    chart.scrollbarX = new am4core.Scrollbar();\n    this.chart = chart;\n    this.update_data();\n  },\n  beforeDestroy() {\n    if (this.chart) {\n      this.chart.dispose();\n    }\n  },\n  methods: {\n      update_data() {\n      var token = localStorage.getItem('token')\n      var self = this;\n      var query = \"http://localhost:3000/api/workingtimes/user/\" +  jwt_decode(token).id\n      if (this.start != null && this.end != null) {\n          query += `?start=${this.start}&end=${this.end}`;\n      }\n      axios.get(query, {\n      headers: {Authorization: 'Bearer ' + token}\n      })\n      .then(function(result) {\n      var data = result.data;\n      var graphData = [];\n      var dailyHours = 0;\n      var index, obj;\n\n      for (var [index, obj] of data.entries()) {\n          var start = moment(obj.start);\n          var end = moment(obj.end);\n          dailyHours += end.diff(start, 'hours');\n          if (data[index+1] == undefined || !(moment(data[index+1].start).isSame(start, 'day'))) {\n          graphData.push({\n              date: `${start.year().toString()}-${(start.month() + 1).toString()}-${start.date().toString()}`,\n              hours: dailyHours\n          });\n          dailyHours = 0;\n          }\n      }\n      self.chart.data = graphData;\n      })\n  }\n  }\n};\n",{"version":3,"sources":["Dashboard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Dashboard.vue","sourceRoot":"src/pages","sourcesContent":["<template>\n  <div>\n      <b-card bg-variant=\"light\" text-variant=\"dark\" border-variant=\"dark\" title=\"Time Range\">\n        <center>\n        <b-card-text>\n          Start: <date-picker format=\"YYYY-MM-DD HH:mm:ss\" valueType=\"format\" v-model=\"start\" type=\"datetime\" :time-picker-options=\"timeOptions\" :lang=\"lang\" :shortcuts=\"shortcuts\"></date-picker>\n        </b-card-text>\n        <b-card-text>\n          End: <date-picker format=\"YYYY-MM-DD HH:mm:ss\" valueType=\"format\" v-model=\"end\" type=\"datetime\" :time-picker-options=\"timeOptions\" :lang=lang :shortcuts=\"shortcuts\"></date-picker>\n        </b-card-text>\n        </center>\n      </b-card>\n      <br/>\n      <center><b-button v-on:click=\"update_data\">Update le graph</b-button></center>\n    <div class=\"graph\" ref=\"chartdiv\"></div>\n  </div>\n</template>\n\n<script>\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport DashboardLayout from '@/pages';\nimport axios from 'axios';\nimport jwt_decode from 'jwt-decode';\nimport moment from 'moment';\nimport DatePicker from 'vue2-datepicker';\nimport datetime from 'vuejs-datetimepicker';\n\n\nam4core.useTheme(am4themes_animated);\nexport default {\n  name: 'Dashboard',\n  components: {\n    DatePicker,\n    datetime\n  },\n  data() {\n    return {\n      start: null,\n      end: null,\n      shortcuts: [\n      {\n        text: 'OK',\n        onClick: () => {\n          this.start = [new Date()],\n          this.end = [new Date()]\n          }\n      }],\n      timeOptions: {\n          start: '',\n          step: '',\n          end: ''\n      },\n      lang: {\n          days: ['Dim', 'Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam'],\n          months: ['Jan', 'Fev', 'Mar', 'Avr', 'Mai', 'Jui', 'Jui', 'Aou', 'Sep', 'Oct', 'Nov', 'Dec'],\n      }\n    }\n  },\n  mounted() {\n    let chart = am4core.create(this.$refs.chartdiv, am4charts.XYChart);\n    chart.data = [];\n    // XY\n    chart.dateFormatter.dateFormat = \"yyyy-MM-dd\";\n    let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\n    let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n    let series = chart.series.push(new am4charts.ColumnSeries());\n    series.dataFields.valueY = \"hours\";\n    series.dataFields.dateX = \"date\";\n    series.tooltipText = \"{value}\";\n    series.dataFields.value = \"hours\";\n    series.columns.template.width = am4core.percent(50);\n    series.tooltip.pointerOrientation = \"vertical\";\n\n    chart.cursor = new am4charts.XYCursor();\n    chart.cursor.snapToSeries = series;\n    chart.cursor.xAxis = dateAxis;\n    //chart.scrollbarY = new am4core.Scrollbar();\n    chart.scrollbarX = new am4core.Scrollbar();\n    this.chart = chart;\n    this.update_data();\n  },\n  beforeDestroy() {\n    if (this.chart) {\n      this.chart.dispose();\n    }\n  },\n  methods: {\n      update_data() {\n      var token = localStorage.getItem('token')\n      var self = this;\n      var query = \"http://localhost:3000/api/workingtimes/user/\" +  jwt_decode(token).id\n      if (this.start != null && this.end != null) {\n          query += `?start=${this.start}&end=${this.end}`;\n      }\n      axios.get(query, {\n      headers: {Authorization: 'Bearer ' + token}\n      })\n      .then(function(result) {\n      var data = result.data;\n      var graphData = [];\n      var dailyHours = 0;\n      var index, obj;\n\n      for (var [index, obj] of data.entries()) {\n          var start = moment(obj.start);\n          var end = moment(obj.end);\n          dailyHours += end.diff(start, 'hours');\n          if (data[index+1] == undefined || !(moment(data[index+1].start).isSame(start, 'day'))) {\n          graphData.push({\n              date: `${start.year().toString()}-${(start.month() + 1).toString()}-${start.date().toString()}`,\n              hours: dailyHours\n          });\n          dailyHours = 0;\n          }\n      }\n      self.chart.data = graphData;\n      })\n  }\n  }\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.graph {\n  margin: auto;\n  width: 90%;\n  height: 500px;\n}\n</style>"]}]}
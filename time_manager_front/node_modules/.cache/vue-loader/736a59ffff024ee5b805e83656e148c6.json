{"remainingRequest":"/home/AmineOmz/Bureau/T_DOP_700/front_aut/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/AmineOmz/Bureau/T_DOP_700/front_aut/src/pages/TeamManager.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/AmineOmz/Bureau/T_DOP_700/front_aut/src/pages/TeamManager.vue","mtime":1569675044938},{"path":"/home/AmineOmz/Bureau/T_DOP_700/front_aut/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/AmineOmz/Bureau/T_DOP_700/front_aut/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/AmineOmz/Bureau/T_DOP_700/front_aut/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/AmineOmz/Bureau/T_DOP_700/front_aut/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from \"axios\";\nimport Swal from \"sweetalert2\";\nimport jwt_decode from \"jwt-decode\";\n\nexport default {\n  name: \"TeamManager\",\n\n  data() {\n    return {\n      // FOR ROLES\n      admin: false,\n      manager: false,\n\n      // FOR ADMIN\n      users: [],\n      teams: [],\n      employees: [],\n      employeeId: null,\n      teamId: null,\n\n      // MANAGER\n      myTeams: [],\n      myEmployees: [],\n      myEmployeesInfo: [],\n      myEmployeeId: null,\n      myTeamId: null,\n\n      // FOR ALL\n\n      members: [],\n      into: null,\n      teamName: '',\n      nameofTeam: ''\n    };\n  },\n\n  created() {\n    this.checkRole();\n    this.getEmployees();\n    this.getTeams();\n  },\n\n  methods: {\n    checkRole() {\n      if (jwt_decode(localStorage.getItem(\"token\")).role == \"Administrator\") {\n        this.admin = true;\n        this.manager = false;\n      } else if (jwt_decode(localStorage.getItem(\"token\")).role == \"Manager\") {\n        this.admin = false;\n        this.manager = true;\n      } else {\n        this.admin = false;\n        this.manager = false;\n      }\n    },\n\n    selectedValueEmployee(e) {\n        this.employeeId = e.target.value\n    },\n\n    selectedValueTeam(e) {\n        this.teamId = e.target.value\n    },\n\n    selectedValueMyEmployee(e) {\n        this.myEmployeeId = e.target.value;\n    },\n\n    selectedValueMyTeam(e) {\n        this.myTeamId = e.target.value;\n    },\n\n    getEmployees() {\n      axios\n        .get(\"http://localhost:3000/api/users\", {\n          headers: {\n            Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n          }\n        })\n        .then(response => {\n          // RETRIEVE USERS WITHOUT ADMIN\n          this.users = response.data;\n          this.users.splice(0, 1);\n\n          // RETRIEVE EMPLOYEES\n\n          if (this.admin) {\n                for (var i = 0; i < this.users.length; i++) {\n                    if (this.users[i].role == \"Employee\") {\n                        this.employees.push(this.users[i]);\n                    }\n                }\n          }\n          \n        })\n        .catch(error => {\n          console.log(error);\n        });\n    },\n\n    getTeams() {\n      axios\n        .get(\"http://localhost:3000/api/teams\", {\n          headers: {\n            Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n          }\n        })\n        .then(response => {\n          // CHECK IF ADMIN OR MANAGER\n          if (this.admin) {\n            this.teams = response.data;\n          } else if (this.manager) {\n            this.teams = response.data;\n            for (var i = 0; i < this.teams.length; i++) {\n              if (this.teams[i].managerId == jwt_decode(localStorage.getItem(\"token\")).id) {\n                this.myTeams.push(this.teams[i]);\n              }\n            }\n          }\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    },\n\n    addTo() {\n        if (this.employeeId == null && this.teamId == null) {\n            alert('Erreur: employé ou équipe non selectionné(e)s')\n        } else {\n            // RECUPERER LES EQUIPES OU CET EMPLOYE APPARTIENT\n            axios.get('http://localhost:3000/api/teamscontent/user/' + this.employeeId, {\n                headers: {\n                    Authorization: 'Bearer ' + localStorage.getItem('token')\n                }\n            })\n            .then((response) => {\n                console.log(response.data);\n                console.log('TEAM CHOISIE' + this.teamId);\n\n                this.members = response.data;\n\n                for (var i = 0; i < this.members.length; i++) {\n                    if (this.members[i].teamId == this.teamId) {\n                        alert('User existe deja dans cette team');\n                        return;\n                    }\n                }\n\n                axios.post('http://localhost:3000/api/teamscontent', {teamId: this.teamId, employeeId: this.employeeId}, {\n                    headers: {\n                        Authorization: 'Bearer ' + localStorage.getItem('token')\n                    }\n                })\n                .then((resp) => {\n                    console.log(resp);\n                })\n                .catch((err) => {\n                    console.log(err);\n                })\n            })\n            .catch((error) => {\n                console.log(error);\n            });\n        }\n    },\n\n    addToMyTeam() {\n\n        if (this.myEmployeeId == null && this.myTeamId == null) {\n            alert('Erreur: employé ou équipe non selectionné(e)s')\n        } else {\n            // RECUPERER LES EQUIPES OU CET EMPLOYE APPARTIENT\n            axios.get('http://localhost:3000/api/teamscontent/user/' + this.myEmployeeId, {\n                headers: {\n                    Authorization: 'Bearer ' + localStorage.getItem('token')\n                }\n            })\n            .then((response) => {\n                console.log(response.data);\n                console.log('TEAM CHOISIE' + this.myTeamId);\n\n                this.members = response.data;\n\n                for (var i = 0; i < this.members.length; i++) {\n                    if (this.members[i].teamId == this.myTeamId) {\n                        alert('User existe deja dans cette team');\n                        return;\n                    }\n                }\n\n                axios.post('http://localhost:3000/api/teamscontent', {teamId: this.myTeamId, employeeId: this.myEmployeeId}, {\n                    headers: {\n                        Authorization: 'Bearer ' + localStorage.getItem('token')\n                    }\n                })\n                .then((resp) => {\n                    console.log(resp);\n                })\n                .catch((err) => {\n                    console.log(err);\n                })\n            })\n            .catch((error) => {\n                console.log(error);\n            });\n        }\n\n    },\n\n    removeFrom() {\n        if (this.employeeId == null && this.teamId == null) {\n            alert('Erreur: employé ou équipe non selectionné(e)s')\n        } else {\n            // RECUPERER LES EQUIPES OU CET EMPLOYE APPARTIENT\n            axios.get('http://localhost:3000/api/teamscontent/user/' + this.employeeId, {\n                headers: {\n                    Authorization: 'Bearer ' + localStorage.getItem('token')\n                }\n            })\n            .then((response) => {\n\n                this.members = response.data;\n\n                for (var i = 0; i < this.members.length; i++) {\n                    if (this.members[i].teamId == this.teamId) {\n                        axios.delete('http://localhost:3000/api/team/' + this.teamId + '/user/' + this.employeeId, {\n                            headers: {\n                                Authorization: 'Bearer ' + localStorage.getItem('token')\n                            }\n                        })\n                        .then((resp) => {\n                            console.log(resp);\n                            alert('Employé supprimé avec succès');\n                            return;\n                        })\n                        .catch((err) => {\n                            console.log(err);\n                        })\n                    }\n                }\n                alert('Erreur de suppression: Cet utilisateur n existe meme pas dans cette team');\n            })\n            .catch((error) => {\n                console.log(error);\n            });\n        }\n    },\n\n    removeFromMyTeam() {\n        if (this.myEmployeeId == null && this.myTeamId == null) {\n            alert('Erreur: employé ou équipe non selectionné(e)s')\n        } else {\n            // RECUPERER LES EQUIPES OU CET EMPLOYE APPARTIENT\n            axios.get('http://localhost:3000/api/teamscontent/user/' + this.myEmployeeId, {\n                headers: {\n                    Authorization: 'Bearer ' + localStorage.getItem('token')\n                }\n            })\n            .then((response) => {\n\n                this.members = response.data;\n\n                for (var i = 0; i < this.members.length; i++) {\n                    if (this.members[i].myTeamId == this.teamId) {\n                        axios.delete('http://localhost:3000/api/team/' + this.myTeamId + '/user/' + this.myEmployeeId, {\n                            headers: {\n                                Authorization: 'Bearer ' + localStorage.getItem('token')\n                            }\n                        })\n                        .then((resp) => {\n                            console.log(resp);\n                            alert('Employé supprimé avec succès');\n                            return;\n                        })\n                        .catch((err) => {\n                            console.log(err);\n                        })\n                    }\n                }\n                alert('Erreur de suppression: Cet utilisateur n existe meme pas dans cette team');\n            })\n            .catch((error) => {\n                console.log(error);\n            });\n        }\n    },\n\n    // FOR MODAL TEAM ###############################################################\n\n        resetModal() {\n            \n            if (this.admin) {\n                axios.get('http://localhost:3000/api/teams/' + this.teamId, {\n                    headers: {\n                        Authorization: 'Bearer ' + localStorage.getItem('token')\n                    }\n                })\n                .then((response) => {\n                    this.nameofTeam = response.data.name;\n                })\n                .catch((error) => {\n                    console.log(error);\n                });\n            } else if (this.manager) {\n                axios.get('http://localhost:3000/api/teams/' + this.myTeamId, {\n                    headers: {\n                        Authorization: 'Bearer ' + localStorage.getItem('token')\n                    }\n                })\n                .then((response) => {\n                    this.nameofTeam = response.data.name;\n                })\n                .catch((error) => {\n                    console.log(error);\n                });\n            }\n\n            this.teamName = this.nameofTeam\n        },\n\n        handleOk(bvModalEvt) {\n          // Prevent modal from closing\n          bvModalEvt.preventDefault()\n          // Trigger submit handler\n          this.handleSubmit()\n        },\n\n        handleSubmit() {\n\n            if (this.admin) {\n\n                axios.get('http://localhost:3000/api/teams/' + this.teamId, {\n                    headers: {\n                        Authorization: 'Bearer ' + localStorage.getItem('token')\n                    }\n                })\n                .then((response) => {\n                    this.managerId = response.data.managerId;\n                })\n                .catch((error) => {\n                    console.log(error);\n                });\n                \n\n                axios.put('http://localhost:3000/api/teams/' + this.teamId, {name: this.teamName, managerId: this.managerId}, {\n                    headers: {\n                        Authorization: 'Bearer ' + localStorage.getItem('token')\n                    }\n                })\n                .then((response) => {\n                    alert('Mise à jour réussie')\n                })\n                .catch((error) => {\n                    console.log(error);\n                });\n            } else if (this.manager) {\n                axios.put('http://localhost:3000/api/teams/' + this.myTeamId, {name: this.teamName, managerId: jwt_decode(localStorage.getItem('token')).id}, {\n                    headers: {\n                        Authorization: 'Bearer ' + localStorage.getItem('token')\n                    }\n                })\n                .then((response) => {\n                    alert('Mise à jour réussie')\n                })\n                .catch((error) => {\n                    console.log(error);\n                });\n            }\n\n\n            this.$nextTick(() => {\n                this.$refs.modal.hide()\n            })\n        },\n  }\n};\n",{"version":3,"sources":["TeamManager.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"TeamManager.vue","sourceRoot":"src/pages","sourcesContent":["<template>\n  <div>\n    <!-- FOR ADMIN -->\n\n    <select v-if=\"admin\" id=\"listTeams\">\n      <option>Choisissez une équipe</option>\n      <option v-for=\"team in teams\" :key=\"team.id\" :value=\"team.id\" v-on:click=\"selectedValueTeam\">{{ team.name }}</option>\n    </select>\n\n    <br><br><br>\n\n    <select v-if=\"admin\" id=\"listTeams\">\n      <option>Choisissez un employé à ajouter/supprimer dans/de l'équipe choisie</option>\n      <option v-for=\"employee in employees\" :key=\"employee.id\" :value=\"employee.id\" v-on:click=\"selectedValueEmployee\">{{ employee.first_name }} {{ employee.last_name }} /{{ employee.role }}</option>\n    </select>\n\n    <!-- FOR MANAGER -->\n\n    <select v-if=\"manager\" id=\"listTeams\">\n      <option>Choisissez une équipe</option>\n      <option v-for=\"myTeam in myTeams\" :key=\"myTeam.id\" :value=\"myTeam.id\" v-on:click=\"selectedValueMyTeam\">{{ myTeam.name }}</option>\n    </select>\n\n    <br><br><br>\n\n    <select v-if=\"manager\" id=\"listTeams\">\n      <option>Choisissez un employé à ajouter dans l'équipe choisie</option>\n      <option v-for=\"employee in myEmployeesInfo\" :key=\"employee.id\" :value=\"employee.id\" v-on:click=\"selectedValueMyEmployee\">{{ employee.first_name }} {{ employee.last_name }} /{{ employee.role }}</option>\n    </select>\n\n    <!-- For editing team -->\n    <b-modal id=\"edit-team\" ref=\"modal\" title=\"Modifier le nom de l'équipe\" @show=\"resetModal\" @hidden=\"resetModal\" @ok=\"handleOk\">\n        <form ref=\"form\" @submit.stop.prevent=\"handleSubmit\">\n            <b-form-group label=\"Nom de l'équipe\" label-for=\"teamName\" invalid-feedback=\"Nom de l'équipe est obligatoire\">\n                <b-form-input id=\"teamName\" v-model=\"teamName\" required></b-form-input>\n            </b-form-group>\n        </form>\n    </b-modal>\n\n    <br>\n    <br>\n    <center>\n      <button v-on:click=\"addTo\">Ajouter à</button>&nbsp;&nbsp;&nbsp;\n      <button v-on:click=\"removeFrom\">Supprimer de:</button>\n      <b-button v-b-modal.edit-team>Editer une équipe</b-button>\n    </center>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport Swal from \"sweetalert2\";\nimport jwt_decode from \"jwt-decode\";\n\nexport default {\n  name: \"TeamManager\",\n\n  data() {\n    return {\n      // FOR ROLES\n      admin: false,\n      manager: false,\n\n      // FOR ADMIN\n      users: [],\n      teams: [],\n      employees: [],\n      employeeId: null,\n      teamId: null,\n\n      // MANAGER\n      myTeams: [],\n      myEmployees: [],\n      myEmployeesInfo: [],\n      myEmployeeId: null,\n      myTeamId: null,\n\n      // FOR ALL\n\n      members: [],\n      into: null,\n      teamName: '',\n      nameofTeam: ''\n    };\n  },\n\n  created() {\n    this.checkRole();\n    this.getEmployees();\n    this.getTeams();\n  },\n\n  methods: {\n    checkRole() {\n      if (jwt_decode(localStorage.getItem(\"token\")).role == \"Administrator\") {\n        this.admin = true;\n        this.manager = false;\n      } else if (jwt_decode(localStorage.getItem(\"token\")).role == \"Manager\") {\n        this.admin = false;\n        this.manager = true;\n      } else {\n        this.admin = false;\n        this.manager = false;\n      }\n    },\n\n    selectedValueEmployee(e) {\n        this.employeeId = e.target.value\n    },\n\n    selectedValueTeam(e) {\n        this.teamId = e.target.value\n    },\n\n    selectedValueMyEmployee(e) {\n        this.myEmployeeId = e.target.value;\n    },\n\n    selectedValueMyTeam(e) {\n        this.myTeamId = e.target.value;\n    },\n\n    getEmployees() {\n      axios\n        .get(\"http://localhost:3000/api/users\", {\n          headers: {\n            Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n          }\n        })\n        .then(response => {\n          // RETRIEVE USERS WITHOUT ADMIN\n          this.users = response.data;\n          this.users.splice(0, 1);\n\n          // RETRIEVE EMPLOYEES\n\n          if (this.admin) {\n                for (var i = 0; i < this.users.length; i++) {\n                    if (this.users[i].role == \"Employee\") {\n                        this.employees.push(this.users[i]);\n                    }\n                }\n          }\n          \n        })\n        .catch(error => {\n          console.log(error);\n        });\n    },\n\n    getTeams() {\n      axios\n        .get(\"http://localhost:3000/api/teams\", {\n          headers: {\n            Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n          }\n        })\n        .then(response => {\n          // CHECK IF ADMIN OR MANAGER\n          if (this.admin) {\n            this.teams = response.data;\n          } else if (this.manager) {\n            this.teams = response.data;\n            for (var i = 0; i < this.teams.length; i++) {\n              if (this.teams[i].managerId == jwt_decode(localStorage.getItem(\"token\")).id) {\n                this.myTeams.push(this.teams[i]);\n              }\n            }\n          }\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    },\n\n    addTo() {\n        if (this.employeeId == null && this.teamId == null) {\n            alert('Erreur: employé ou équipe non selectionné(e)s')\n        } else {\n            // RECUPERER LES EQUIPES OU CET EMPLOYE APPARTIENT\n            axios.get('http://localhost:3000/api/teamscontent/user/' + this.employeeId, {\n                headers: {\n                    Authorization: 'Bearer ' + localStorage.getItem('token')\n                }\n            })\n            .then((response) => {\n                console.log(response.data);\n                console.log('TEAM CHOISIE' + this.teamId);\n\n                this.members = response.data;\n\n                for (var i = 0; i < this.members.length; i++) {\n                    if (this.members[i].teamId == this.teamId) {\n                        alert('User existe deja dans cette team');\n                        return;\n                    }\n                }\n\n                axios.post('http://localhost:3000/api/teamscontent', {teamId: this.teamId, employeeId: this.employeeId}, {\n                    headers: {\n                        Authorization: 'Bearer ' + localStorage.getItem('token')\n                    }\n                })\n                .then((resp) => {\n                    console.log(resp);\n                })\n                .catch((err) => {\n                    console.log(err);\n                })\n            })\n            .catch((error) => {\n                console.log(error);\n            });\n        }\n    },\n\n    addToMyTeam() {\n\n        if (this.myEmployeeId == null && this.myTeamId == null) {\n            alert('Erreur: employé ou équipe non selectionné(e)s')\n        } else {\n            // RECUPERER LES EQUIPES OU CET EMPLOYE APPARTIENT\n            axios.get('http://localhost:3000/api/teamscontent/user/' + this.myEmployeeId, {\n                headers: {\n                    Authorization: 'Bearer ' + localStorage.getItem('token')\n                }\n            })\n            .then((response) => {\n                console.log(response.data);\n                console.log('TEAM CHOISIE' + this.myTeamId);\n\n                this.members = response.data;\n\n                for (var i = 0; i < this.members.length; i++) {\n                    if (this.members[i].teamId == this.myTeamId) {\n                        alert('User existe deja dans cette team');\n                        return;\n                    }\n                }\n\n                axios.post('http://localhost:3000/api/teamscontent', {teamId: this.myTeamId, employeeId: this.myEmployeeId}, {\n                    headers: {\n                        Authorization: 'Bearer ' + localStorage.getItem('token')\n                    }\n                })\n                .then((resp) => {\n                    console.log(resp);\n                })\n                .catch((err) => {\n                    console.log(err);\n                })\n            })\n            .catch((error) => {\n                console.log(error);\n            });\n        }\n\n    },\n\n    removeFrom() {\n        if (this.employeeId == null && this.teamId == null) {\n            alert('Erreur: employé ou équipe non selectionné(e)s')\n        } else {\n            // RECUPERER LES EQUIPES OU CET EMPLOYE APPARTIENT\n            axios.get('http://localhost:3000/api/teamscontent/user/' + this.employeeId, {\n                headers: {\n                    Authorization: 'Bearer ' + localStorage.getItem('token')\n                }\n            })\n            .then((response) => {\n\n                this.members = response.data;\n\n                for (var i = 0; i < this.members.length; i++) {\n                    if (this.members[i].teamId == this.teamId) {\n                        axios.delete('http://localhost:3000/api/team/' + this.teamId + '/user/' + this.employeeId, {\n                            headers: {\n                                Authorization: 'Bearer ' + localStorage.getItem('token')\n                            }\n                        })\n                        .then((resp) => {\n                            console.log(resp);\n                            alert('Employé supprimé avec succès');\n                            return;\n                        })\n                        .catch((err) => {\n                            console.log(err);\n                        })\n                    }\n                }\n                alert('Erreur de suppression: Cet utilisateur n existe meme pas dans cette team');\n            })\n            .catch((error) => {\n                console.log(error);\n            });\n        }\n    },\n\n    removeFromMyTeam() {\n        if (this.myEmployeeId == null && this.myTeamId == null) {\n            alert('Erreur: employé ou équipe non selectionné(e)s')\n        } else {\n            // RECUPERER LES EQUIPES OU CET EMPLOYE APPARTIENT\n            axios.get('http://localhost:3000/api/teamscontent/user/' + this.myEmployeeId, {\n                headers: {\n                    Authorization: 'Bearer ' + localStorage.getItem('token')\n                }\n            })\n            .then((response) => {\n\n                this.members = response.data;\n\n                for (var i = 0; i < this.members.length; i++) {\n                    if (this.members[i].myTeamId == this.teamId) {\n                        axios.delete('http://localhost:3000/api/team/' + this.myTeamId + '/user/' + this.myEmployeeId, {\n                            headers: {\n                                Authorization: 'Bearer ' + localStorage.getItem('token')\n                            }\n                        })\n                        .then((resp) => {\n                            console.log(resp);\n                            alert('Employé supprimé avec succès');\n                            return;\n                        })\n                        .catch((err) => {\n                            console.log(err);\n                        })\n                    }\n                }\n                alert('Erreur de suppression: Cet utilisateur n existe meme pas dans cette team');\n            })\n            .catch((error) => {\n                console.log(error);\n            });\n        }\n    },\n\n    // FOR MODAL TEAM ###############################################################\n\n        resetModal() {\n            \n            if (this.admin) {\n                axios.get('http://localhost:3000/api/teams/' + this.teamId, {\n                    headers: {\n                        Authorization: 'Bearer ' + localStorage.getItem('token')\n                    }\n                })\n                .then((response) => {\n                    this.nameofTeam = response.data.name;\n                })\n                .catch((error) => {\n                    console.log(error);\n                });\n            } else if (this.manager) {\n                axios.get('http://localhost:3000/api/teams/' + this.myTeamId, {\n                    headers: {\n                        Authorization: 'Bearer ' + localStorage.getItem('token')\n                    }\n                })\n                .then((response) => {\n                    this.nameofTeam = response.data.name;\n                })\n                .catch((error) => {\n                    console.log(error);\n                });\n            }\n\n            this.teamName = this.nameofTeam\n        },\n\n        handleOk(bvModalEvt) {\n          // Prevent modal from closing\n          bvModalEvt.preventDefault()\n          // Trigger submit handler\n          this.handleSubmit()\n        },\n\n        handleSubmit() {\n\n            if (this.admin) {\n\n                axios.get('http://localhost:3000/api/teams/' + this.teamId, {\n                    headers: {\n                        Authorization: 'Bearer ' + localStorage.getItem('token')\n                    }\n                })\n                .then((response) => {\n                    this.managerId = response.data.managerId;\n                })\n                .catch((error) => {\n                    console.log(error);\n                });\n                \n\n                axios.put('http://localhost:3000/api/teams/' + this.teamId, {name: this.teamName, managerId: this.managerId}, {\n                    headers: {\n                        Authorization: 'Bearer ' + localStorage.getItem('token')\n                    }\n                })\n                .then((response) => {\n                    alert('Mise à jour réussie')\n                })\n                .catch((error) => {\n                    console.log(error);\n                });\n            } else if (this.manager) {\n                axios.put('http://localhost:3000/api/teams/' + this.myTeamId, {name: this.teamName, managerId: jwt_decode(localStorage.getItem('token')).id}, {\n                    headers: {\n                        Authorization: 'Bearer ' + localStorage.getItem('token')\n                    }\n                })\n                .then((response) => {\n                    alert('Mise à jour réussie')\n                })\n                .catch((error) => {\n                    console.log(error);\n                });\n            }\n\n\n            this.$nextTick(() => {\n                this.$refs.modal.hide()\n            })\n        },\n  }\n};\n</script>\n\n<style>\n#listTeams {\n  width: 80%;\n  display: block;\n  margin: 0 auto;\n}\n</style>\n"]}]}
{"remainingRequest":"/home/AmineOmz/Bureau/T_DOP_700/front_aut/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/AmineOmz/Bureau/T_DOP_700/front_aut/src/pages/TimeManager.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/AmineOmz/Bureau/T_DOP_700/front_aut/src/pages/TimeManager.vue","mtime":1569677284777},{"path":"/home/AmineOmz/Bureau/T_DOP_700/front_aut/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/AmineOmz/Bureau/T_DOP_700/front_aut/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/AmineOmz/Bureau/T_DOP_700/front_aut/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/AmineOmz/Bureau/T_DOP_700/front_aut/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport moment from 'moment';\nimport { setInterval, clearInterval } from 'timers';\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nimport datetime from 'vuejs-datetimepicker';\nimport jwt_decode from 'jwt-decode';\nimport DatePicker from 'vue2-datepicker'\n\nexport default {\n    \n    name: 'TimeManager',\n\n    components: {\n        datetime,\n        DatePicker\n    },\n\n    data() {\n        return {\n            shortcuts: [\n                {\n                    text: 'OK',\n                    onClick: () => {\n                        this.setArrival = [new Date()],\n                        this.departure = [new Date()]\n                    }\n                }\n            ],\n            timeOptions: {\n                start: '',\n                step: '',\n                end: ''\n            },\n            lang: {\n                days: ['Dim', 'Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam'],\n                months: ['Jan', 'Fev', 'Mar', 'Avr', 'Mai', 'Jui', 'Jui', 'Aou', 'Sep', 'Oct', 'Nov', 'Dec'],\n            },\n            today: moment().format('LLLL'),\n            interval: null,\n            chrono: null,\n            arrival: null,\n            departure: null,\n            statusClock: false,\n            finalChrono: null,\n            setDeparture: null,\n            setArrival: null,\n            clocks: {\n                status: '',\n                time: ''\n            }\n        }\n    },\n    created(){\n\n    },\n    methods:{\n        postClock(){\n\n            if (this.chrono == null){\n\n                this.statusClock = true;\n                const now = moment.now();\n                this.arrival = moment().toISOString().substring(0, moment().toISOString().length -1)\n                this.setArrival = this.arrival\n                this.clocks = {\n                    status: true,\n                    time: moment().toISOString().substring(0, moment().toISOString().length -1)\n                };\n\n                axios.patch('http://localhost:3000/api/clocks/user/' + jwt_decode(localStorage.getItem('token')).id,  this.clocks, {\n                    headers: {\n                        Authorization: 'Bearer ' + localStorage.getItem('token')\n                    }\n                })\n                .then((response) => {\n                    console.log(response);\n                })\n                .catch((error) => {\n                    console.log(error);\n                });\n                \n                this.interval = setInterval(()=> {\n                    this.chrono = moment(moment().diff(now)).format(\"HH:mm:ss\")\n                }, 1000);\n\n            }else {\n                this.finalChrono = this.chrono;\n                \n                this.chrono = null;\n                this.statusClock = false;\n                this.departure = moment().toISOString().substring(0, moment().toISOString().length -1);\n                this.setDeparture = this.departure;\n                   this.clocks = {\n                    status: false,\n                    time: moment().toISOString().substring(0, moment().toISOString().length -1)\n                };\n\n                axios.patch('http://localhost:3000/api/clocks/user/' + jwt_decode(localStorage.getItem('token')).id,  this.clocks, {\n                    headers: {\n                        Authorization: 'Bearer ' + localStorage.getItem('token')\n                    }\n                })\n                .then((response) => {\n                    console.log(response);\n                })\n                .catch((error) => {\n                    console.log(error);\n                })\n\n                clearInterval(this.interval);\n                Swal.fire(\"Vous avez travaillez \" + this.finalChrono + \" aujourd'hui\");\n            }\n\n        },\n\n        setWorkingTime() {\n\n            if (this.chrono == null && (this.setDeparture == null || this.setArrival == null)) {\n                alert('rien à mettre à jour');\n                return;\n            }\n\n            if (this.chrono != null && (this.setDeparture == null || this.setArrival == null)) {\n                alert('Vous ne pouvez pas mettre à jour car le chronomètre tourne toujours');\n                return;\n            }\n\n            if (this.setArrival != null && this.setDeparture != null) {\n\n                this.clocks = {\n                    status: true,\n                    time: moment().toISOString().substring(0, moment().toISOString().length -1)\n                }\n\n                // SET L ARRIVEE\n                axios.patch('http://localhost:3000/api/clocks/user/' + jwt_decode(localStorage.getItem('token')).id, this.clocks, {\n                    headers: {\n                            Authorization: 'Bearer ' + localStorage.getItem('token')\n                    }\n                })\n                .then((response) => {\n                    console.log(response);\n                })\n                .catch((error) => {\n                    console.log(error);\n                });\n\n                this.clocks = {\n                    status: false,\n                    time: moment().toISOString().substring(0, moment().toISOString().length -1)\n                }\n\n                // SET LE DEPART\n                axios.patch('http://localhost:3000/api/clocks/user/' + jwt_decode(localStorage.getItem('token')).id, this.clocks {\n                    headers: {\n                        Authorization: 'Bearer ' + localStorage.getItem('token')\n                    }\n                })\n                .then((response) => {\n                    console.log(response);\n                    return;\n                })\n                .catch((error) => {\n                    console.log(error);\n                });\n            } else {\n                alert('Rien à mettre à jour');\n            }\n        }\n    }\n\n\n\n\n\n}\n",{"version":3,"sources":["TimeManager.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsfile":"TimeManager.vue","sourceRoot":"src/pages","sourcesContent":["<template>\n    <div>\n        <p> <b>&nbsp;&nbsp;&nbsp;{{ today }}</b></p>\n        <center><b-jumbotron header=\"Pointez\" lead=\"Pensez à pointer à votre arrivé, et dès votre départ\" class=\"center\" border-variant=\"dark\"><br>\n            <b-button variant=\"primary\" v-on:click=\"postClock\" v-if=\"!statusClock\">Démarrer</b-button>\n            <b-button variant=\"primary\" v-on:click=\"postClock\" v-if=\"statusClock\">{{chrono}} | stop</b-button><br><br>\n            <b><span class=\"float-left\">Arrivé(e): {{ arrival }}</span></b><b><span class=\"float-right\">Parti(e): {{ departure }}</span></b>\n        </b-jumbotron></center><br><br>\n        <b-card bg-variant=\"light\" text-variant=\"dark\" border-variant=\"dark\" title=\"Récapitulatif horaire d'aujourd'hui\">\n            <b-card-text>\n                Arrivé(e): <date-picker format=\"DD/MM/YYYY HH:mm:ss\" valueType=\"format\" v-model=\"setArrival\" type=\"datetime\" :time-picker-options=\"timeOptions\" :lang=\"lang\" :shortcuts=\"shortcuts\"></date-picker>\n            </b-card-text>\n            <b-card-text>\n                Parti(e): <date-picker format=\"DD/MM/YYYY HH:mm:ss\" valueType=\"format\" v-model=\"setDeparture\" type=\"datetime\" :time-picker-options=\"timeOptions\" :lang=\"lang\" :shortcuts=\"shortcuts\"></date-picker>\n            </b-card-text>\n            <center><b-button href=\"#\" variant=\"primary\" v-on:click=\"setWorkingTime\">Mettez à jours vos horaires</b-button></center>\n        </b-card>\n    </div>\n</template>\n\n<script>\n\nimport moment from 'moment';\nimport { setInterval, clearInterval } from 'timers';\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nimport datetime from 'vuejs-datetimepicker';\nimport jwt_decode from 'jwt-decode';\nimport DatePicker from 'vue2-datepicker'\n\nexport default {\n    \n    name: 'TimeManager',\n\n    components: {\n        datetime,\n        DatePicker\n    },\n\n    data() {\n        return {\n            shortcuts: [\n                {\n                    text: 'OK',\n                    onClick: () => {\n                        this.setArrival = [new Date()],\n                        this.departure = [new Date()]\n                    }\n                }\n            ],\n            timeOptions: {\n                start: '',\n                step: '',\n                end: ''\n            },\n            lang: {\n                days: ['Dim', 'Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam'],\n                months: ['Jan', 'Fev', 'Mar', 'Avr', 'Mai', 'Jui', 'Jui', 'Aou', 'Sep', 'Oct', 'Nov', 'Dec'],\n            },\n            today: moment().format('LLLL'),\n            interval: null,\n            chrono: null,\n            arrival: null,\n            departure: null,\n            statusClock: false,\n            finalChrono: null,\n            setDeparture: null,\n            setArrival: null,\n            clocks: {\n                status: '',\n                time: ''\n            }\n        }\n    },\n    created(){\n\n    },\n    methods:{\n        postClock(){\n\n            if (this.chrono == null){\n\n                this.statusClock = true;\n                const now = moment.now();\n                this.arrival = moment().toISOString().substring(0, moment().toISOString().length -1)\n                this.setArrival = this.arrival\n                this.clocks = {\n                    status: true,\n                    time: moment().toISOString().substring(0, moment().toISOString().length -1)\n                };\n\n                axios.patch('http://localhost:3000/api/clocks/user/' + jwt_decode(localStorage.getItem('token')).id,  this.clocks, {\n                    headers: {\n                        Authorization: 'Bearer ' + localStorage.getItem('token')\n                    }\n                })\n                .then((response) => {\n                    console.log(response);\n                })\n                .catch((error) => {\n                    console.log(error);\n                });\n                \n                this.interval = setInterval(()=> {\n                    this.chrono = moment(moment().diff(now)).format(\"HH:mm:ss\")\n                }, 1000);\n\n            }else {\n                this.finalChrono = this.chrono;\n                \n                this.chrono = null;\n                this.statusClock = false;\n                this.departure = moment().toISOString().substring(0, moment().toISOString().length -1);\n                this.setDeparture = this.departure;\n                   this.clocks = {\n                    status: false,\n                    time: moment().toISOString().substring(0, moment().toISOString().length -1)\n                };\n\n                axios.patch('http://localhost:3000/api/clocks/user/' + jwt_decode(localStorage.getItem('token')).id,  this.clocks, {\n                    headers: {\n                        Authorization: 'Bearer ' + localStorage.getItem('token')\n                    }\n                })\n                .then((response) => {\n                    console.log(response);\n                })\n                .catch((error) => {\n                    console.log(error);\n                })\n\n                clearInterval(this.interval);\n                Swal.fire(\"Vous avez travaillez \" + this.finalChrono + \" aujourd'hui\");\n            }\n\n        },\n\n        setWorkingTime() {\n\n            if (this.chrono == null && (this.setDeparture == null || this.setArrival == null)) {\n                alert('rien à mettre à jour');\n                return;\n            }\n\n            if (this.chrono != null && (this.setDeparture == null || this.setArrival == null)) {\n                alert('Vous ne pouvez pas mettre à jour car le chronomètre tourne toujours');\n                return;\n            }\n\n            if (this.setArrival != null && this.setDeparture != null) {\n\n                this.clocks = {\n                    status: true,\n                    time: moment().toISOString().substring(0, moment().toISOString().length -1)\n                }\n\n                // SET L ARRIVEE\n                axios.patch('http://localhost:3000/api/clocks/user/' + jwt_decode(localStorage.getItem('token')).id, this.clocks, {\n                    headers: {\n                            Authorization: 'Bearer ' + localStorage.getItem('token')\n                    }\n                })\n                .then((response) => {\n                    console.log(response);\n                })\n                .catch((error) => {\n                    console.log(error);\n                });\n\n                this.clocks = {\n                    status: false,\n                    time: moment().toISOString().substring(0, moment().toISOString().length -1)\n                }\n\n                // SET LE DEPART\n                axios.patch('http://localhost:3000/api/clocks/user/' + jwt_decode(localStorage.getItem('token')).id, this.clocks {\n                    headers: {\n                        Authorization: 'Bearer ' + localStorage.getItem('token')\n                    }\n                })\n                .then((response) => {\n                    console.log(response);\n                    return;\n                })\n                .catch((error) => {\n                    console.log(error);\n                });\n            } else {\n                alert('Rien à mettre à jour');\n            }\n        }\n    }\n\n\n\n\n\n}\n</script>\n"]}]}
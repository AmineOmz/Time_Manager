{"remainingRequest":"/home/AmineOmz/Bureau/T_DOP_700/front_aut/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/AmineOmz/Bureau/T_DOP_700/front_aut/src/pages/TimeManager.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/AmineOmz/Bureau/T_DOP_700/front_aut/src/pages/TimeManager.vue","mtime":1569875054487},{"path":"/home/AmineOmz/Bureau/T_DOP_700/front_aut/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/AmineOmz/Bureau/T_DOP_700/front_aut/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/AmineOmz/Bureau/T_DOP_700/front_aut/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/AmineOmz/Bureau/T_DOP_700/front_aut/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport moment, { duration } from 'moment';\nimport { setInterval, clearInterval } from 'timers';\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nimport datetime from 'vuejs-datetimepicker';\nimport jwt_decode from 'jwt-decode';\nimport DatePicker from 'vue2-datepicker'\n\nexport default {\n    name: 'TimeManager',\n    components: {\n        datetime,\n        DatePicker\n    },\n    data() {\n        return {\n            shortcuts: [\n                {\n                    text: 'OK',\n                    onClick: () => {\n                        this.setArrival = [new Date()],\n                        this.departure = [new Date()]\n                    }\n                }\n            ],\n            timeOptions: {\n                start: '',\n                step: '',\n                end: ''\n            },\n            lang: {\n                days: ['Dim', 'Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam'],\n                months: ['Jan', 'Fev', 'Mar', 'Avr', 'Mai', 'Jui', 'Jui', 'Aou', 'Sep', 'Oct', 'Nov', 'Dec'],\n            },\n            today: moment().format('LLLL'),\n            interval: null,\n            chrono: null,\n            arrival: null,\n            departure: null,\n            statusClock: false,\n            timeClock: null,\n            finalChrono: null,\n            setDeparture: null,\n            setArrival: null\n        }\n    },\n    mounted() {\n        this.getClock()\n        .then((data) => {\n            this.statusClock = data.status\n            this.timeClock = moment.utc(data.time).format('YYYY-MM-DD HH:mm:ss')\n        })\n    }\n    ,\n    methods:{\n        getClock(){\n            return new Promise((resolve) => {\n                var token = localStorage.getItem('token')\n                var query = \"https://timepool.me:3001/api/clocks/user/\" + jwt_decode(token).id;\n                var self = this;\n                axios.get(query, {\n                    headers: {Authorization: 'Bearer ' + token}\n                })\n                .then(function(result) {\n                    resolve(result.data);\n                })\n                .catch((error) => {\n                    console.log(error);\n                });\n            }); \n        },\n        patchClock(){\n            var token = localStorage.getItem('token');\n            var self = this;\n            var oldStatus = self.statusClock;\n            self.statusClock = !self.statusClock;\n            var timeWhenClicked = moment().format('YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');\n            console.log(timeWhenClicked);\n            var clockObject = {status: self.statusClock, time: timeWhenClicked};\n            axios.patch('https://timepool.me:3001/api/clocks/user/' + jwt_decode(token).id, clockObject, {\n                    headers: {\n                            Authorization: 'Bearer ' + localStorage.getItem('token')\n                    }\n            })\n            .then(function() {  \n                if(oldStatus) {\n                    var timeWorked = moment.utc(timeWhenClicked).diff(moment.utc(self.timeClock));\n                    var hours = parseInt(moment.duration(timeWorked).asHours());\n                    var minutes = parseInt(moment.duration(timeWorked).asMinutes())%60;\n                    Swal.fire(`Vous avez travaillé ${hours} H et ${minutes} m`);\n                }\n                self.getClock()\n                .then(data => {\n                    self.timeClock = moment.utc(data.time).format('YYYY-MM-DD HH:mm:ss')\n                })\n            })  \n            .catch((error) => {\n                console.log(error);\n            });      \n        },\n        setWorkingTime() {\n            if (this.chrono == null && (this.setDeparture == null || this.setArrival == null)) {\n                Swal.fire({\n                    type: 'error',\n                    title: 'Oops...',\n                    text: 'Erreur: rien à mettre à jour!',\n                    footer: 'Merci de réessayez'\n                })\n                return;\n            }\n\n            if (this.chrono != null && (this.setDeparture == null || this.setArrival == null)) {\n                Swal.fire({\n                    type: 'error',\n                    title: 'Oops...',\n                    text: 'Erreur: Vous ne pouvez pas mettre à jour, le chronomètre tourne toujours',\n                    footer: 'Merci de le mettre à jour après avoir fini votre travail'\n                })\n                return;\n            }\n\n            if (this.statusClock == false && this.setArrival != null && this.setDeparture != null) {\n\n                this.clocks = {\n                    status: true,\n                    time: this.setArrival\n                }\n\n                // SET L ARRIVEE\n                axios.patch('https://timepool.me:3001/api/clocks/user/' + jwt_decode(localStorage.getItem('token')).id, this.clocks, {\n                    headers: {\n                            Authorization: 'Bearer ' + localStorage.getItem('token')\n                    }\n                })\n                .then((response) => {\n\n                    this.clocks = {\n                        status: false,\n                        time: this.setDeparture\n                    }\n\n                    // SET LE DEPART\n                    axios.patch('https://timepool.me:3001/api/clocks/user/' + jwt_decode(localStorage.getItem('token')).id, this.clocks, {\n                        headers: {\n                            Authorization: 'Bearer ' + localStorage.getItem('token')\n                        }\n                    })\n                    .then((response) => {\n                        return;\n                    })\n                    .catch((error) => {\n                        console.log(error);\n                    });\n\n                })\n                .catch((error) => {\n                    console.log(error);\n                });\n            } else {\n                Swal.fire({\n                    type: 'error',\n                    title: 'Oops...',\n                    text: 'Erreur: rien à mettre à jour',\n                    footer: 'Merci de réessayez'\n                })\n            }\n    }\n}\n}\n",{"version":3,"sources":["TimeManager.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TimeManager.vue","sourceRoot":"src/pages","sourcesContent":["<template>\n    <div>\n        <p> <b>&nbsp;&nbsp;&nbsp;{{ today }}</b></p>\n        <center><b-jumbotron header=\"Pointez\" lead=\"Pensez à pointer à votre arrivée, et dès votre départ.\" class=\"center\" border-variant=\"dark\"><br>\n            <b-button variant=\"primary\" v-on:click=\"patchClock\">Pointer</b-button><br/><br/>\n            <div v-if=\"statusClock\">\n                <br/>\n                <p>Vous êtes actuellement: Au travail</p>\n                <b><span>Dernière Arrivée: <br/><b>{{ timeClock }}</b></span></b>\n            </div>\n            <div v-if=\"!statusClock\">\n                <br/>\n                <p>Vous êtes actuellement: En dehors</p>\n                <b><span>Dernier Départ:<br/><b>{{ timeClock }}</b></span></b>\n            </div>\n           \n        </b-jumbotron></center><br><br>\n        <b-card bg-variant=\"light\" text-variant=\"dark\" border-variant=\"dark\" title=\"Récapitulatif horaire d'aujourd'hui\">\n            <b-card-text>\n                Arrivé(e): <date-picker format=\"YYYY-MM-DD HH:mm:ss\" valueType=\"format\" v-model=\"setArrival\" type=\"datetime\" :time-picker-options=\"timeOptions\" :lang=\"lang\" :shortcuts=\"shortcuts\"></date-picker>\n            </b-card-text>\n            <b-card-text>\n                Parti(e): <date-picker format=\"YYYY-MM-DD HH:mm:ss\" valueType=\"format\" v-model=\"setDeparture\" type=\"datetime\" :time-picker-options=\"timeOptions\" :lang=\"lang\" :shortcuts=\"shortcuts\"></date-picker>\n            </b-card-text>\n            <center><b-button href=\"#\" variant=\"primary\" v-on:click=\"setWorkingTime\">Mettez à jour vos horaires</b-button></center>\n        </b-card>\n    </div>\n</template>\n\n<script>\n\nimport moment, { duration } from 'moment';\nimport { setInterval, clearInterval } from 'timers';\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nimport datetime from 'vuejs-datetimepicker';\nimport jwt_decode from 'jwt-decode';\nimport DatePicker from 'vue2-datepicker'\n\nexport default {\n    name: 'TimeManager',\n    components: {\n        datetime,\n        DatePicker\n    },\n    data() {\n        return {\n            shortcuts: [\n                {\n                    text: 'OK',\n                    onClick: () => {\n                        this.setArrival = [new Date()],\n                        this.departure = [new Date()]\n                    }\n                }\n            ],\n            timeOptions: {\n                start: '',\n                step: '',\n                end: ''\n            },\n            lang: {\n                days: ['Dim', 'Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam'],\n                months: ['Jan', 'Fev', 'Mar', 'Avr', 'Mai', 'Jui', 'Jui', 'Aou', 'Sep', 'Oct', 'Nov', 'Dec'],\n            },\n            today: moment().format('LLLL'),\n            interval: null,\n            chrono: null,\n            arrival: null,\n            departure: null,\n            statusClock: false,\n            timeClock: null,\n            finalChrono: null,\n            setDeparture: null,\n            setArrival: null\n        }\n    },\n    mounted() {\n        this.getClock()\n        .then((data) => {\n            this.statusClock = data.status\n            this.timeClock = moment.utc(data.time).format('YYYY-MM-DD HH:mm:ss')\n        })\n    }\n    ,\n    methods:{\n        getClock(){\n            return new Promise((resolve) => {\n                var token = localStorage.getItem('token')\n                var query = \"https://timepool.me:3001/api/clocks/user/\" + jwt_decode(token).id;\n                var self = this;\n                axios.get(query, {\n                    headers: {Authorization: 'Bearer ' + token}\n                })\n                .then(function(result) {\n                    resolve(result.data);\n                })\n                .catch((error) => {\n                    console.log(error);\n                });\n            }); \n        },\n        patchClock(){\n            var token = localStorage.getItem('token');\n            var self = this;\n            var oldStatus = self.statusClock;\n            self.statusClock = !self.statusClock;\n            var timeWhenClicked = moment().format('YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');\n            console.log(timeWhenClicked);\n            var clockObject = {status: self.statusClock, time: timeWhenClicked};\n            axios.patch('https://timepool.me:3001/api/clocks/user/' + jwt_decode(token).id, clockObject, {\n                    headers: {\n                            Authorization: 'Bearer ' + localStorage.getItem('token')\n                    }\n            })\n            .then(function() {  \n                if(oldStatus) {\n                    var timeWorked = moment.utc(timeWhenClicked).diff(moment.utc(self.timeClock));\n                    var hours = parseInt(moment.duration(timeWorked).asHours());\n                    var minutes = parseInt(moment.duration(timeWorked).asMinutes())%60;\n                    Swal.fire(`Vous avez travaillé ${hours} H et ${minutes} m`);\n                }\n                self.getClock()\n                .then(data => {\n                    self.timeClock = moment.utc(data.time).format('YYYY-MM-DD HH:mm:ss')\n                })\n            })  \n            .catch((error) => {\n                console.log(error);\n            });      \n        },\n        setWorkingTime() {\n            if (this.chrono == null && (this.setDeparture == null || this.setArrival == null)) {\n                Swal.fire({\n                    type: 'error',\n                    title: 'Oops...',\n                    text: 'Erreur: rien à mettre à jour!',\n                    footer: 'Merci de réessayez'\n                })\n                return;\n            }\n\n            if (this.chrono != null && (this.setDeparture == null || this.setArrival == null)) {\n                Swal.fire({\n                    type: 'error',\n                    title: 'Oops...',\n                    text: 'Erreur: Vous ne pouvez pas mettre à jour, le chronomètre tourne toujours',\n                    footer: 'Merci de le mettre à jour après avoir fini votre travail'\n                })\n                return;\n            }\n\n            if (this.statusClock == false && this.setArrival != null && this.setDeparture != null) {\n\n                this.clocks = {\n                    status: true,\n                    time: this.setArrival\n                }\n\n                // SET L ARRIVEE\n                axios.patch('https://timepool.me:3001/api/clocks/user/' + jwt_decode(localStorage.getItem('token')).id, this.clocks, {\n                    headers: {\n                            Authorization: 'Bearer ' + localStorage.getItem('token')\n                    }\n                })\n                .then((response) => {\n\n                    this.clocks = {\n                        status: false,\n                        time: this.setDeparture\n                    }\n\n                    // SET LE DEPART\n                    axios.patch('https://timepool.me:3001/api/clocks/user/' + jwt_decode(localStorage.getItem('token')).id, this.clocks, {\n                        headers: {\n                            Authorization: 'Bearer ' + localStorage.getItem('token')\n                        }\n                    })\n                    .then((response) => {\n                        return;\n                    })\n                    .catch((error) => {\n                        console.log(error);\n                    });\n\n                })\n                .catch((error) => {\n                    console.log(error);\n                });\n            } else {\n                Swal.fire({\n                    type: 'error',\n                    title: 'Oops...',\n                    text: 'Erreur: rien à mettre à jour',\n                    footer: 'Merci de réessayez'\n                })\n            }\n    }\n}\n}\n</script>\n"]}]}
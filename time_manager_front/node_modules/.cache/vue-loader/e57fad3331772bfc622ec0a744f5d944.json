{"remainingRequest":"/home/AmineOmz/Bureau/T_DOP_700/front_aut/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/AmineOmz/Bureau/T_DOP_700/front_aut/src/pages/TeamManager.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/AmineOmz/Bureau/T_DOP_700/front_aut/src/pages/TeamManager.vue","mtime":1569772132641},{"path":"/home/AmineOmz/Bureau/T_DOP_700/front_aut/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/AmineOmz/Bureau/T_DOP_700/front_aut/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/AmineOmz/Bureau/T_DOP_700/front_aut/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/AmineOmz/Bureau/T_DOP_700/front_aut/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from \"axios\";\nimport Swal from \"sweetalert2\";\nimport jwt_decode from \"jwt-decode\";\n\nexport default {\n  name: \"TeamManager\",\n\n  data() {\n    return {\n      // FOR ROLES\n      admin: false,\n      manager: false,\n\n      // FOR ADMIN\n      managers: [],\n      teams: [],\n      managerId: null,\n\n      // FOR MANAGER\n      myTeams: [],\n\n      // FOR ALL\n      users: [],\n      employees: [],\n      teamName: null,\n      teamId: null,\n      members: [],\n\n      \n    };\n  },\n\n  created() {\n    this.checkRole();\n    this.getEmployeesAndManagers();\n    this.getTeams();\n  },\n\n  methods: {\n\n    checkRole() {\n      if (jwt_decode(localStorage.getItem(\"token\")).role == \"Administrator\") {\n        this.admin = true;\n        this.manager = false;\n      } else if (jwt_decode(localStorage.getItem(\"token\")).role == \"Manager\") {\n        this.admin = false;\n        this.manager = true;\n      } else {\n        this.admin = false;\n        this.manager = false;\n      }\n    },\n\n    getTeams() {\n        axios.get('http://localhost:3000/api/teams', {\n            headers: {\n                Authorization: 'Bearer ' + localStorage.getItem('token')\n            }\n        })\n        .then((response) => {\n            this.teams = response.data;\n\n            // CASE MANAGER\n            for (var i = 0; i < this.teams.length; i++) {\n                if (this.teams[i].managerId == jwt_decode(localStorage.getItem('token')).id) {\n                    this.myTeams.push(this.teams[i]);\n                }\n            }\n        })\n        .catch((error) => {\n            console.log(error);\n        });\n    },\n\n    getEmployeesAndManagers() {\n        axios.get('http://localhost:3000/api/users', {\n            headers: {\n                Authorization: 'Bearer ' + localStorage.getItem('token')\n            }\n        })\n        .then((response) => {\n            this.users = response.data;\n            this.users.splice(0, 1);\n\n            // GET ONLY MANAGERS\n            for (var i = 0; i < this.users.length; i++) {\n                if (this.users[i].role == 'Manager') {\n                    this.managers.push(this.users[i]);\n                }\n            }\n\n            // GET ONLY EMPLOYEES\n            for (var j = 0; j < this.users.length; j++) {\n                if (this.users[j].role == 'Employee') {\n                    this.employees.push(this.users[j]);\n                }\n            }\n        })\n        .catch((error) => {\n            console.log(error);\n        });\n    },\n\n    selectedValueManager(e) {\n        this.managerId = e.target.value;\n    },\n\n    selectedValueTeam(e) {\n        this.teamId = e.target.value;\n    },\n\n    addTeam() {\n\n        if (this.teamName != null && this.managerId != null) {\n            axios.post('http://localhost:3000/api/teams', {name: this.teamName, managerId: this.managerId}, {\n                headers: {\n                    Authorization: 'Bearer ' + localStorage.getItem('token')\n                }\n            })\n            .then((response) => {\n                alert('Equipe ajoutée avec succès');\n            })\n            .catch((error) => {\n                console.log(error);\n            });\n        } else if (this.teamName == \"\" || this.teamName == null && this.managerId == null){\n            alert('Erreur: Nom de l equipe ou manager non renseigné');\n        }\n    },\n\n    addToTeam(id) {\n        if (this.teamId == null) {\n            alert('Aucune équipe choisie');\n        } else {\n\n            // AVOIR LES EQUIPES A LAQUELLE APPARTIENT L EMPLOYE CHOISI\n            axios.get('http://localhost:3000/api/teamscontent/user/' + id, {\n                headers: {\n                    Authorization: 'Bearer ' + localStorage.getItem('token')\n                }\n            })\n            .then((response) => {\n                this.members = response.data;\n                console.log(this.members.length);\n                for (var i = 0; i < this.members.length; i++) {\n                    if (this.members[i].teamId == this.teamId) {\n                        alert('Existe déjà')\n                        return;\n                    } else {\n                        if (i == this.members.length -1) {\n                            axios.post('http://localhost:3000/api/teamscontent', {teamId: this.teamId, employeeId: id}, {\n                                headers: {\n                                    Authorization: 'Bearer ' + localStorage.getItem('token')\n                                }\n                            })\n                            .then(r => {\n                                alert('ajouté avec succès')\n                            })\n                            .catch(e => {\n                                alert('erreur lors de l ajout');\n                            });\n                        }\n                    }\n                }\n            })\n            .catch((error) => {\n                console.log(error);\n            });\n        }\n\n        this.members = [];\n    },\n\n    removeFromTeam(id){\n        if (this.teamId == null) {\n            alert('Aucune équipe choisie');\n        } else {\n            alert('supprimer l employe ' + id + ' de l équipe ' + this.teamId);\n        }\n    }\n  }\n};\n",{"version":3,"sources":["TeamManager.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TeamManager.vue","sourceRoot":"src/pages","sourcesContent":["<template>\n  <div>\n      <!-- AJOUT D'UNE EQUIPE QUE POUR L'ADMIN -->\n      <h3 class=\"mt-3 text-center\" v-if=\"admin\">Ajouter une équipe</h3>\n      <hr v-if=\"admin\">\n      <div class=\"row\" v-if=\"admin\">\n            <div class=\"col\">\n                <label>Nom de l'équipe</label>\n                <input type=\"text\" class=\"form-control\" v-model=\"teamName\" required>\n            </div>\n            <div class=\"col\">\n                <label>L'affecter à un manager</label><br>\n                <select id=\"listManagers\" required>\n                    <option>Choisissez un manager</option>\n                    <option v-for=\"manager in managers\" :key=\"manager.id\" :value=\"manager.id\" v-on:click=\"selectedValueManager\">{{ manager.first_name }} {{ manager.last_name }}</option>\n                </select>\n            </div>\n      </div>\n      <center><button class=\"btn btn-info mt-2\" @click=\"addTeam\" v-if=\"admin\">Ajouter</button></center>\n      <hr v-if=\"admin\">\n      <!-- FIN DE L'AJOUT D'UNE EQUIPE QUI CONCERNE L'ADMIN -->\n\n      <table class=\"table table-striped table-hover\">\n        <thead>\n            <tr>\n            <th scope=\"col\">Id</th>\n            <th scope=\"col\">Nom</th>\n            <th scope=\"col\">Prénom</th>\n            <th scope=\"col\">Email</th>\n            <th scope=\"col\">Role</th>\n            <th scope=\"col\">Options</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr v-for=\"employee in employees\" :key=\"employee.id\">\n                <td>{{ employee.id }}</td>\n                <td>{{ employee.last_name }}</td>\n                <td>{{ employee.first_name }}</td>\n                <td>{{ employee.email }}</td>\n                <td>{{ employee.role }}</td>\n                <td>\n                    <button v-on:click=\"addToTeam(employee.id)\">Ajouter à</button> | \n                    <button v-on:click=\"removeFromTeam(employee.id)\">Supprimer de </button> |\n                    <select>\n                        <option>Choisissez une équipe</option>\n                        <option v-for=\"team in teams\" :key=\"team.id\" :value=\"team.id\" v-on:click=\"selectedValueTeam\">{{ team.name }}</option>\n                    </select>\n                </td>\n            </tr>\n        </tbody>\n      </table>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport Swal from \"sweetalert2\";\nimport jwt_decode from \"jwt-decode\";\n\nexport default {\n  name: \"TeamManager\",\n\n  data() {\n    return {\n      // FOR ROLES\n      admin: false,\n      manager: false,\n\n      // FOR ADMIN\n      managers: [],\n      teams: [],\n      managerId: null,\n\n      // FOR MANAGER\n      myTeams: [],\n\n      // FOR ALL\n      users: [],\n      employees: [],\n      teamName: null,\n      teamId: null,\n      members: [],\n\n      \n    };\n  },\n\n  created() {\n    this.checkRole();\n    this.getEmployeesAndManagers();\n    this.getTeams();\n  },\n\n  methods: {\n\n    checkRole() {\n      if (jwt_decode(localStorage.getItem(\"token\")).role == \"Administrator\") {\n        this.admin = true;\n        this.manager = false;\n      } else if (jwt_decode(localStorage.getItem(\"token\")).role == \"Manager\") {\n        this.admin = false;\n        this.manager = true;\n      } else {\n        this.admin = false;\n        this.manager = false;\n      }\n    },\n\n    getTeams() {\n        axios.get('http://localhost:3000/api/teams', {\n            headers: {\n                Authorization: 'Bearer ' + localStorage.getItem('token')\n            }\n        })\n        .then((response) => {\n            this.teams = response.data;\n\n            // CASE MANAGER\n            for (var i = 0; i < this.teams.length; i++) {\n                if (this.teams[i].managerId == jwt_decode(localStorage.getItem('token')).id) {\n                    this.myTeams.push(this.teams[i]);\n                }\n            }\n        })\n        .catch((error) => {\n            console.log(error);\n        });\n    },\n\n    getEmployeesAndManagers() {\n        axios.get('http://localhost:3000/api/users', {\n            headers: {\n                Authorization: 'Bearer ' + localStorage.getItem('token')\n            }\n        })\n        .then((response) => {\n            this.users = response.data;\n            this.users.splice(0, 1);\n\n            // GET ONLY MANAGERS\n            for (var i = 0; i < this.users.length; i++) {\n                if (this.users[i].role == 'Manager') {\n                    this.managers.push(this.users[i]);\n                }\n            }\n\n            // GET ONLY EMPLOYEES\n            for (var j = 0; j < this.users.length; j++) {\n                if (this.users[j].role == 'Employee') {\n                    this.employees.push(this.users[j]);\n                }\n            }\n        })\n        .catch((error) => {\n            console.log(error);\n        });\n    },\n\n    selectedValueManager(e) {\n        this.managerId = e.target.value;\n    },\n\n    selectedValueTeam(e) {\n        this.teamId = e.target.value;\n    },\n\n    addTeam() {\n\n        if (this.teamName != null && this.managerId != null) {\n            axios.post('http://localhost:3000/api/teams', {name: this.teamName, managerId: this.managerId}, {\n                headers: {\n                    Authorization: 'Bearer ' + localStorage.getItem('token')\n                }\n            })\n            .then((response) => {\n                alert('Equipe ajoutée avec succès');\n            })\n            .catch((error) => {\n                console.log(error);\n            });\n        } else if (this.teamName == \"\" || this.teamName == null && this.managerId == null){\n            alert('Erreur: Nom de l equipe ou manager non renseigné');\n        }\n    },\n\n    addToTeam(id) {\n        if (this.teamId == null) {\n            alert('Aucune équipe choisie');\n        } else {\n\n            // AVOIR LES EQUIPES A LAQUELLE APPARTIENT L EMPLOYE CHOISI\n            axios.get('http://localhost:3000/api/teamscontent/user/' + id, {\n                headers: {\n                    Authorization: 'Bearer ' + localStorage.getItem('token')\n                }\n            })\n            .then((response) => {\n                this.members = response.data;\n                console.log(this.members.length);\n                for (var i = 0; i < this.members.length; i++) {\n                    if (this.members[i].teamId == this.teamId) {\n                        alert('Existe déjà')\n                        return;\n                    } else {\n                        if (i == this.members.length -1) {\n                            axios.post('http://localhost:3000/api/teamscontent', {teamId: this.teamId, employeeId: id}, {\n                                headers: {\n                                    Authorization: 'Bearer ' + localStorage.getItem('token')\n                                }\n                            })\n                            .then(r => {\n                                alert('ajouté avec succès')\n                            })\n                            .catch(e => {\n                                alert('erreur lors de l ajout');\n                            });\n                        }\n                    }\n                }\n            })\n            .catch((error) => {\n                console.log(error);\n            });\n        }\n\n        this.members = [];\n    },\n\n    removeFromTeam(id){\n        if (this.teamId == null) {\n            alert('Aucune équipe choisie');\n        } else {\n            alert('supprimer l employe ' + id + ' de l équipe ' + this.teamId);\n        }\n    }\n  }\n};\n</script>\n\n<style>\n#listManagers {\n  width: 40%;\n  display: block;\n  margin: 0 auto;\n}\n\n#listTeams {\n    width: 40px;\n}\n</style>\n"]}]}